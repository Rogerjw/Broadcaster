{"version":3,"sources":["../../server/controllers/redflags.controller.js"],"names":["RedflagsController","req","res","status","send","data","redflags","redflag","find","item","id","toString","params","success","message","schema","Joi","object","title","string","min","required","type","comment","location","images","array","videos","result","validate","body","error","details","Redflag","length","createdOn","users","user","email","jwt","verify","header","push","json","splice","redflagsController"],"mappings":"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","sourcesContent":["\r\nimport { users } from '../models/data';\r\nimport Redflag from '../models/redflag.model';\r\nimport { redflags } from '../models/data';\r\nimport Joi from '@hapi/joi';\r\nimport jwt from 'jsonwebtoken'\r\n\r\nclass RedflagsController{\r\n      fetchAllRedFlags(req,res){\r\n        return res.status(200).send({\r\n        status: 200,\r\n        data: redflags,\r\n        });\r\n      }\r\n      getSpecificRedflag(req, res){\r\n        const redflag = redflags.find((item) => item.id.toString() === req.params.id);\r\n        if (!redflag) {\r\n          return res.status(404).send({\r\n            success: 404,\r\n            message: 'The red-flag does not exist, please check well the entered id',\r\n          });\r\n        }\r\n        return res.status(200).send({\r\n          status: 200,\r\n         data: redflag\r\n        });\r\n      }\r\n      createRedflag(req,res){\r\n        const schema =  Joi.object({\r\n          title: Joi.string().min(4).required(),\r\n          type: Joi.string().min(4).required(),\r\n          comment: Joi.string().min(10).required(),\r\n          location: Joi.string().min(10).required(),\r\n          status: Joi.string().min(3).required(),\r\n          images: Joi.array().required(),\r\n          videos: Joi.array().required()\r\n          });\r\n          const result = schema.validate(req.body);\r\n          if(result.error){\r\n            res.status(400).send(result.error.details[0].message);\r\n            return;\r\n          }\r\n      const redflag = new Redflag(\r\n      redflags.length + 1,\r\n      req.body.createdOn,\r\n      users.find((user) => user.email === jwt.verify(req.header('token'),'jwtPrivateKey').email).id,\r\n      req.body.title,\r\n      req.body.type,\r\n      req.body.location,\r\n      req.body.status,\r\n      req.body.images,\r\n      req.body.videos,\r\n      req.body.comment);\r\n      redflags.push(redflag);\r\n      return res.status(201).send({\r\n      status: 201,\r\n      data: {\r\n        id: redflag.id,\r\n        message: 'Created redflag record'\r\n      },\r\n      });\r\n      }\r\n      editLocation(req, res){\r\n      const  user = users.find((user) => user.email === jwt.verify(req.header('token'),'jwtPrivateKey').email);\r\n      if (user.type === 'citizen') {\r\n      const redflag = redflags.find((item) => item.id.toString() === req.params.id);\r\n      if (redflag) {\r\n        if (redflag.status != 'draft') {\r\n          return res.status(401).json({\r\n            status: 401,\r\n            data: {\r\n              message: 'you are not allowed to edit a red-flag which is under-investigation'\r\n            },\r\n          });\r\n        }\r\n\r\n        redflag.location = req.body.location;\r\n        return res.status(200).json({\r\n          status: 200,\r\n          data: {\r\n            id: redflag.id,\r\n            message: 'Updated red-flag recordâ€™s location',\r\n          },\r\n        });\r\n      }\r\n      return res.status(404).json({\r\n        status: 404,\r\n        data: {\r\n          message: 'red-flag not found'\r\n        },\r\n      });\r\n      }\r\n      return res.status(401).json({\r\n        status: 401,\r\n        data: {\r\n          message: 'you must be a citizen to edit the location'\r\n        },\r\n      });\r\n    \r\n      }\r\n      editComment(req, res){\r\n        const  user = users.find((user) => user.email === jwt.verify(req.header('token'),'jwtPrivateKey').email);\r\n        if (user.type === 'citizen') {\r\n        const redflag = redflags.find((item) => item.id.toString() === req.params.id);\r\n        if (redflag) {\r\n          if (redflag.status != 'draft') {\r\n            return res.status(401).json({\r\n              status: 401,\r\n              data: {\r\n                message: 'you are not allowed to edit a red-flag which is under-investigation'\r\n              },\r\n            });\r\n          }\r\n          redflag.title = req.body.title;\r\n          redflag.type = req.body.type;\r\n          redflag.comment = req.body.comment;\r\n          redflag.location = req.body.location;\r\n          return res.status(200).json({\r\n            status: 200,\r\n            data: {\r\n              id: redflag.id,\r\n              message: 'Updated red-flag recordâ€™s comment',\r\n            },\r\n          });\r\n        }\r\n        return res.status(404).json({\r\n          status: 404,\r\n          data: {\r\n            message: 'red-flag not found'\r\n          },\r\n        });\r\n        }\r\n        return res.status(401).json({\r\n          status: 401,\r\n          data: {\r\n            message: 'you must be a citizen to edit the comment'\r\n          },\r\n        });\r\n      \r\n      }\r\n      deleteRedflag(req, res){\r\n        const  user = users.find((user) => user.email === jwt.verify(req.header('token'),'jwtPrivateKey').email);\r\n        if (user.type === 'citizen') {\r\n        const redflag = redflags.find((item) => item.id.toString() === req.params.id);\r\n        if (redflag) {\r\n          if (redflag.status != 'draft') {\r\n            return res.status(401).json({\r\n              status: 401,\r\n              data: {\r\n                message: 'you are not allowed to delete a red-flag which is under-investigation'\r\n              },\r\n            });\r\n          }\r\n          redflags.splice(redflag,1);\r\n          return res.status(200).json({\r\n            status: 200,\r\n            data: {\r\n              id: redflag.id,\r\n              message: 'red-flag record has been deleted',\r\n              data: redflags\r\n            },\r\n          });\r\n        }\r\n        return res.status(404).json({\r\n          status: 404,\r\n          data: {\r\n            message: 'red-flag not found'\r\n          },\r\n        });\r\n        }\r\n        return res.status(401).json({\r\n          status: 401,\r\n          data: {\r\n            message: 'you must be a citizen to delete a redflag record'\r\n          },\r\n        });\r\n    \r\n\r\n      };\r\n}\r\nconst redflagsController = new RedflagsController();\r\nexport default redflagsController;"],"file":"redflags.controller.js"}